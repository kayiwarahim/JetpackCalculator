package com.example.jetpackcalculator

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CalculatorApp()
        }
    }
}

@Composable
fun CalculatorApp() {
    var input by remember { mutableStateOf("0") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.SpaceBetween,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = input,
            fontSize = 48.sp,
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            maxLines = 2
        )

        Column(
            verticalArrangement = Arrangement.Bottom,
            modifier = Modifier.fillMaxWidth()
        ) {
            val buttons = listOf(
                listOf("7", "8", "9", "/"),
                listOf("4", "5", "6", "*"),
                listOf("1", "2", "3", "-"),
                listOf("0", "C", "=", "+")
            )

            buttons.forEach { row ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(4.dp),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    row.forEach { label ->
                        Button(
                            onClick = {
                                when (label) {
                                    "C" -> input = "0"
                                    "=" -> input = evaluateExpression(input)
                                    else -> {
                                        input = if (input == "0") label else input + label
                                    }
                                }
                            },
                            modifier = Modifier
                                .weight(1f)
                                .padding(4.dp)
                        ) {
                            Text(text = label, fontSize = 24.sp)
                        }
                    }
                }
            }
        }
    }
}

// âœ… Simple expression evaluator
fun evaluateExpression(expression: String): String {
    return try {
        val result = expression.replace(Regex("(?<=[-+*/])|(?=[-+*/])"))
            .split(" ")
            .filter { it.isNotBlank() }
            .fold(listOf<String>()) { acc, token ->
                if (acc.isNotEmpty() && acc.last().matches(Regex("[0-9.]+")) && token.matches(Regex("[0-9.]+"))) {
                    acc.dropLast(1) + (acc.last() + token)
                } else acc + token
            }
        val finalResult = calculate(result)
        finalResult.toString()
    } catch (e: Exception) {
        "Error"
    }
}

fun calculate(tokens: List<String>): Double {
    val stack = mutableListOf<Double>()
    var operator: String? = null

    for (token in tokens) {
        when {
            token.matches(Regex("[0-9.]+")) -> {
                val number = token.toDouble()
                if (operator != null) {
                    val prev = stack.removeLast()
                    stack.add(
                        when (operator) {
                            "+" -> prev + number
                            "-" -> prev - number
                            "*" -> prev * number
                            "/" -> prev / number
                            else -> number
                        }
                    )
                    operator = null
                } else {
                    stack.add(number)
                }
            }
            token in listOf("+", "-", "*", "/") -> operator = token
        }
    }
    return stack.firstOrNull() ?: 0.0
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    CalculatorApp()
}
